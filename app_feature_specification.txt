-----

## プロジェクト概要

ユーザーがアンケートを作成し、投票すると、その結果がリアルタイムで更新されるアプリケーションです。Appleのウェブサイトにインスパイアされた、クリーンでミニマルなUI/UXを特徴とします。

-----

## 技術スタック

  * **フロントエンド**: **Next.js 14 (App Router)**
  * **UI フレームワーク**: **Tailwind CSS**（カスタマイズされたテーマとカラーパレットを使用）
  * **データベース**: **Supabase**
  * **グラフ描画ライブラリ**: **Recharts**
  * **言語**: TypeScript

-----

## Supabase データベース設計

以下のテーブルと、\*\*行レベルセキュリティ (RLS)\*\*を設定します。

1.  **`polls` テーブル**:

      * `id`: `UUID`, 主キー
      * `title`: `text`, `not null`
      * `user_id`: `UUID`, `auth.uid()`への外部キー（作成者の特定用）
      * `created_at`: `timestamp with timezone`, `default now()`
      * **RLS**: 認証されたユーザーのみがレコードを挿入・更新・削除できる。

2.  **`options` テーブル**:

      * `id`: `UUID`, 主キー
      * `poll_id`: `UUID`, `polls.id`への外部キー
      * `text`: `text`, `not null`

3.  **`votes` テーブル**:

      * `id`: `UUID`, 主キー
      * `poll_id`: `UUID`, `polls.id`への外部キー
      * `option_id`: `UUID`, `options.id`への外部キー
      * `user_id`: `UUID`, `auth.uid()`への外部キー
      * `created_at`: `timestamp with timezone`, `default now()`
      * **RLS**: 認証されたユーザーのみがレコードを挿入できる。

-----

## 画面構成とUI/UX要件 (Apple風のデザイン)

### 全体デザインの原則

  * **ミニマリズム**: 余白（ホワイトスペース）を多用し、コンテンツに焦点を当てます。
  * **タイポグラフィ**: Sans-serifフォント（例: SF Pro Display や Inter）を使用し、読みやすさを重視します。
  * **カラーパレット**: ダークモードとライトモードの両方をサポートし、クリーンなモノクローム（グレー、ブラック、ホワイト）を基調とします。アクセントカラーとして鮮やかなブルーやグリーンを限定的に使用します。
  * **エレメント**: 角の丸いボタン、滑らかなアニメーション、透明感のある背景（`backdrop-filter`）などを採用します。

### 1\. トップページ (`/page.tsx`)

  * **UI**: 画面の中央に、シンプルなログイン・サインアップフォームを配置します。背景はライトグレーで、フォーム自体は白いカードに影を付けたデザインにします。
  * **機能**: ログイン済みの場合はダッシュボードへリダイレクト。

### 2\. ダッシュボード (`/dashboard/page.tsx`)

  * **UI**: 画面上部に、ユーザー名と「新しいアンケートを作成」ボタンを配置したヘッダーがあります。中央には、角の丸いカード形式でアンケート一覧を表示します。カードには、タイトルと作成日、そして\*\*投票数（集計済み）\*\*を表示します。カードはマウスオーバーでわずかに浮き上がるアニメーションを付けます。
  * **機能**: アンケート一覧の取得と表示。

### 3\. アンケート作成ページ (`/dashboard/create/page.tsx`)

  * **UI**: フォーム全体を中央に配置した、クリーンな単一ページレイアウトです。入力フィールドは、AppleのiOS設定画面のように、丸みを帯びた長方形のデザインにします。
  * **機能**: アンケートの質問と選択肢を入力し、Supabaseに送信します。

### 4\. アンケート詳細ページ (`/poll/[id]/page.tsx`)

  * **UI**:
      * **質問表示**: 画面上部に大きなフォントで質問文を表示。
      * **投票フォーム**: まだ投票していないユーザー向けに、各選択肢をシンプルで大きなボタンとして表示します。ボタンはクリックすると少し色が変わり、投票済みであることを視覚的にフィードバックします。
      * **リアルタイム結果**: 投票が行われるたびに、結果を示す**棒グラフ**が滑らかなアニメーションで更新されます。棒グラフの棒は、各選択肢に割り当てられたアクセントカラーを使用します。投票済みのユーザーにはグラフのみを表示します。

-----

## 実装ロジック

  * **認証**: Supabase Authenticationを使用し、メール/パスワード認証を実装。セッションはサーバーコンポーネントで管理。
  * **データ操作**:
      * アンケート作成時: `polls`と`options`テーブルにデータを挿入。
      * 投票時: ユーザーIDとアンケートIDの組み合わせで重複投票をチェックし、問題なければ`votes`テーブルにデータを挿入。
  * **リアルタイム更新**: Supabase SDKの`client.from('votes').on('*', ...).subscribe()`を使用し、`votes`テーブルの変更を購読。投票イベントが発生したら、`votes`テーブルから集計データを再取得し、グラフを更新。
  * **UIコンポーネント**: `PollForm.tsx`、`PollChart.tsx`、`PollCard.tsx`など、再利用可能なUIコンポーネントを分離して開発します。

この設計書は、Appleの美学を取り入れつつ、必要な技術的要件と機能をすべて網羅しています。この情報を基に、どのようなUIコンポーネントが必要で、それらがどのように連携するかを明確に伝えられます。

-----

## ファイル構成案

```
/app
├── dashboard
│   ├── create
│   │   └── page.tsx
│   └── page.tsx
├── poll
│   └── [id]
│       └── page.tsx
├── components
│   ├── ui 
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   └── form.tsx
│   ├── PollForm.tsx
│   ├── PollChart.tsx
│   └── PollList.tsx
├── lib
│   ├── supabase
│   │   ├── client.ts
│   │   └── server.ts
│   └── utils.ts
├── styles
│   └── globals.css
└── page.tsx
```